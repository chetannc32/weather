{"version":3,"sources":["Components/Titles.js","Components/Form.js","Components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["titles","props","react_default","a","createElement","className","form","onSubmit","loadweather","type","name","placeholder","Weather","country","city","temperature","humidity","description","error","App","getweather","_callee","event","regenerator_default","wrap","_context","prev","next","target","elements","value","console","log","preventDefault","fetch","concat","then","response","json","_this","setState","main","temp","sys","weather","stop","state","undefined","Titles","Form","this","Components_Weather","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2QAeeA,EAZA,SAACC,GAEZ,OACIC,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,0BAAd,oBACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,6BAAb,uDCQOC,EAdF,SAACL,GAGV,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,QAAMG,SAAWN,EAAMO,aACnBN,EAAAC,EAAAC,cAAA,SAAOK,KAAO,OAAOC,KAAK,OAAOC,YAAa,SAC9CT,EAAAC,EAAAC,cAAA,SAAOK,KAAK,OAAOC,KAAK,UAAUC,YAAc,YAChDT,EAAAC,EAAAC,cAAA,gCCEDQ,EAXC,SAACX,GACf,OACEC,EAAAC,EAAAC,cAAA,WACGH,EAAMY,SAAWZ,EAAMa,MAAQZ,EAAAC,EAAAC,cAAA,sBAAcH,EAAMa,KAApB,KAA4Bb,EAAMY,SACjEZ,EAAMc,aAAeb,EAAAC,EAAAC,cAAA,yBAAiBH,EAAMc,aAC5Cd,EAAMe,UAAYd,EAAAC,EAAAC,cAAA,sBAAcH,EAAMe,UACtCf,EAAMgB,aAAef,EAAAC,EAAAC,cAAA,yBAAiBH,EAAMgB,aAC5ChB,EAAMiB,OAAShB,EAAAC,EAAAC,cAAA,SAAIH,EAAMiB,SCuFjBC,6MArFZC,iDAAa,SAAAC,EAAOC,GAAP,IAAAR,EAAAD,EAAA,OAAAU,EAAApB,EAAAqB,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAGLb,EAAOQ,EAAMM,OAAOC,SAASf,KAAKgB,MAClCjB,EAAUS,EAAMM,OAAOC,SAAShB,QAAQiB,MAC9CC,QAAQC,IAAIlB,GACZQ,EAAMW,iBAIPC,MAAK,oDAAAC,OAAqDrB,EAArD,KAAAqB,OAA6DtB,EAA7D,4CACQuB,KAAK,SAACC,GACH,OAAOA,EAASC,SAEnBF,KAAK,SAACC,GACHN,QAAQC,IAAIK,GACZE,EAAKC,SAAS,CACZzB,YAAYsB,EAASI,KAAKC,KAC1B5B,KAAKuB,EAAS3B,KACdG,QAAQwB,EAASM,IAAI9B,QACrBG,SAAUqB,EAASI,KAAKzB,SACxBC,YAAaoB,EAASO,QAAQ,GAAG3B,YACjCC,MAAO,OAtBb,wBAAAO,EAAAoB,SAAAxB,8DA+CdyB,MAAQ,CACN/B,iBAAYgC,EACZjC,UAAKiC,EACLlC,aAAQkC,EACR/B,cAAU+B,EACV9B,iBAAa8B,EACb7B,WAAO6B,2EAUP,OACE7C,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC4C,EAAD,MACA9C,EAAAC,EAAAC,cAAC6C,EAAD,CAAMzC,YAAe0C,KAAK9B,aAC1BlB,EAAAC,EAAAC,cAAC+C,EAAD,CAEEpC,YAAamC,KAAKJ,MAAM/B,YACxBD,KAAQoC,KAAKJ,MAAMhC,KACnBD,QAAUqC,KAAKJ,MAAMjC,QACrBG,SAAWkC,KAAKJ,MAAM9B,SACtBC,YAAciC,KAAKJ,MAAM7B,YACzBC,MAAQgC,KAAKJ,MAAM5B,gBA5EVkC,IAAMC,WCILC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO1D,EAAAC,EAAAC,cAACyD,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9B,KAAK,SAAA+B,GACjCA,EAAaC","file":"static/js/main.2257d0b7.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst titles = (props) => {\r\n    \r\n    return(\r\n        <div>\r\n        <h1 className=\"title-container__title\">Weather Scanner </h1>\r\n        <p className=\"title-container__subtitle\"> Helps you find weather conditions in cities...  </p>\r\n      </div>\r\n\r\n    );\r\n\r\n}\r\n\r\nexport default titles ;","import React from 'react';\r\n\r\nconst form = (props) => {\r\n\r\n\r\n    return(\r\n        <div>\r\n            <form onSubmit= {props.loadweather}>\r\n                <input type = \"text\" name=\"city\" placeholder =\"City\" />\r\n                <input type=\"text\" name=\"country\" placeholder = \"Country\"  />\r\n                <button>Get Weather</button>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default form ;","import React from 'react';\r\nconst Weather = (props) => {\r\n  return(\r\n    <div>\r\n      {props.country && props.city && <p>Location: {props.city}, {props.country}</p>}\r\n      {props.temperature && <p>Temperature: {props.temperature}</p>}\r\n      {props.humidity && <p>Humidity: {props.humidity}</p>}\r\n      {props.description && <p>Conditions:  {props.description}</p>}\r\n      {props.error && <p>{props.error}</p>}\r\n    </div>\r\n  )\r\n}\r\nexport default Weather;","import React from 'react';\nimport Titles from './Components/Titles.js' ;\nimport Form from './Components/Form.js' ;\nimport Weather from './Components/Weather.js' ;\nimport './App.css';\n\n\n\nclass  App extends React.Component {\n  \n   getweather = async (event) =>{\n\n     //console.log( event.target.elements);\n     const city = event.target.elements.city.value;\n     const country = event.target.elements.country.value;\n     console.log(city);\n     event.preventDefault() ;\n    // const fetching = await fetch('http://api.openweathermap.org/data/2.5/weather?q={city},{country}&appid=eddc59533a22df8a0f007f862477e2ff');\n    // const response = await fetching.json();\n\n    fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=eddc59533a22df8a0f007f862477e2ff`)\n                .then((response) => {\n                    return response.json();\n                })\n                .then((response) => {\n                    console.log(response);\n                    this.setState({\n                      temperature:response.main.temp,\n                      city:response.name,\n                      country:response.sys.country,\n                      humidity: response.main.humidity,\n                      description: response.weather[0].description,\n                      error: \"\"   \n                    })\n                });\n\n\n    // if(city&&country){\n\n    //   this.setState({\n    //     temperature:response.main.temp,\n    //     city:response.name,\n    //     country:response.sys.country,\n    //     humidity: response.main.humidity,\n    //     description: response.weather[0].description,\n    //     error: \"\" \n    //   })\n    // }\n    // else{\n    //   this.setState({\n    //     error:\"Please enter the values\"\n    //   })\n    // }\n\n  \n}\n\n  state = {\n    temperature:undefined,\n    city:undefined,\n    country:undefined,\n    humidity: undefined,\n    description: undefined,\n    error: undefined\n  }\n\n\n\n\n\n\n\n  render() {\n    return (\n      <div>\n        <Titles/>\n        <Form loadweather = {this.getweather} />\n        <Weather\n\n          temperature={this.state.temperature }\n          city = {this.state.city }\n          country ={this.state.country }\n          humidity ={this.state.humidity }\n          description ={this.state.description }\n          error ={this.state.error }\n\n        />\n      </div>\n\n    )\n\n    \n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './App.css'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}